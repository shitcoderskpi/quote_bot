from term_image.image import KittyImage
from base64 import b64decode

base64_png = r""


image_data = b64decode(base64_png)

# Create a temporary file to store the image (or use io.BytesIO)
with open("temp.png", "wb") as f:
    f.write(image_data)

# Display the image using Kitty protocol
try:
    image = KittyImage.from_file("temp.png")
    image.draw()
except Exception as e:
    print(f"Error displaying image: {e}")
finally:
    # Clean up the temporary file
    import os
    os.remove("temp.png")
