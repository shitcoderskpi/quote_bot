use redis::{Commands, RedisResult};
use serde_json::Value;
use std::env;
use std::fs;
use std::path::Path;
use std::process::Command;
use std::time::Instant;

fn main() -> RedisResult<()> {
    // –®–∞–≥ 1: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
    // –°–Ω–∞—á–∞–ª–∞ –º—ã —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Redis-—Å–µ—Ä–≤–µ—Ä–æ–º.
    let redis_host = env::var("REDIS_HOST").unwrap_or_else(|_| "127.0.0.1".to_string());
    let redis_url = format!("redis://{}/", redis_host);
    let client = redis::Client::open(redis_url)?;
    let mut con = client.get_connection()?;

    println!("Listening for jobs on 'generate:jobs' queue...");

    // –®–∞–≥ 2: –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞–Ω–∏–π
    // –ü—Ä–æ–≥—Ä–∞–º–º–∞ –±—É–¥–µ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –∂–¥–∞—Ç—å –Ω–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π –≤ –æ—á–µ—Ä–µ–¥–∏.
    loop {
        // –®–∞–≥ 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏ (–±–ª–æ–∫–∏—Ä—É—é—â–∏–π –≤—ã–∑–æ–≤)
        // –ö–æ–º–∞–Ω–¥–∞ BLPOP –±–ª–æ–∫–∏—Ä—É–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ, –ø–æ–∫–∞ –Ω–µ –ø–æ—è–≤–∏—Ç—Å—è –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ.
        let (_queue, job_data): (String, String) = con.blpop("generate:jobs", 0.0)?;

        // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á–∏.
        let start_time = Instant::now();
        println!("Received job: {}", job_data);

        // –®–∞–≥ 4: –ü–∞—Ä—Å–∏–Ω–≥ JSON-–¥–∞–Ω–Ω—ã—Ö
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–º–µ—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.
        let json_value: Value = match serde_json::from_str(&job_data) {
            Ok(v) => v,
            Err(e) => {
                eprintln!("JSON parse error: {}", e);
                continue;
            }
        };
        println!("Processing job received from queue...");

        // –®–∞–≥ 5: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ SVG-—à–∞–±–ª–æ–Ω–∞
        let svg_template: String = match json_value.get("template") {
            Some(Value::String(s)) => s.clone(),
            _ => {
                eprintln!("Missing 'template' key in JSON");
                continue;
            }
        };

        // –®–∞–≥ 6: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏ –∑–∞–º–µ–Ω–∞ –¥–∞–Ω–Ω—ã—Ö –≤ SVG
        // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥–æ—Ç–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –∑–∞–º–µ–Ω—è–µ–º —ç–º–æ–¥–∑–∏.
        let output_dir = "./images";
        if let Err(e) = fs::create_dir_all(output_dir) {
            eprintln!("Failed to create output dir: {}", e);
            continue;
        }

        let output_file = format!("{}/output.png", output_dir);

        // –ó–∞–º–µ–Ω—è–µ–º —ç–º–æ–¥–∑–∏ –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.
        let svg_final = svg_template
            .replace("üòÄ", r#"<image href="./twemoji_png/1f424.png" width="20" height="20"/>"#)
            .replace("üéâ", r#"<image href="./twemoji_png/1f424.png" width="20" height="20"/>"#)
            .replace("‚ù§Ô∏è", r#"<image href="./twemoji_png/1f424.png" width="20" height="20"/>"#)
            .replace("üî•", r#"<image href="./twemoji_png/1f424.png" width="20" height="20"/>"#);

        // –®–∞–≥ 7: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ SVG-—Ñ–∞–π–ª–∞
        let tmp_svg_path = format!("{}/temp.svg", output_dir);
        if let Err(e) = fs::write(&tmp_svg_path, svg_final) {
            eprintln!("Failed to write temporary SVG: {}", e);
            continue;
        }

        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π SVG-—Ñ–∞–π–ª –≤ PNG —Å –ø–æ–º–æ—â—å—é rsvg-convert.
        let status = Command::new("rsvg-convert")
            .arg(&tmp_svg_path)
            .arg("-o")
            .arg(&output_file)
            .status();

        // –®–∞–≥ 8: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏ –æ—á–∏—Å—Ç–∫–∞
        match status {
            Ok(s) if s.success() => {
                // –ò–∑–º–µ—Ä—è–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
                let duration = start_time.elapsed();
                // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –≤—Ä–µ–º—è –≤ –ª–æ–≥.
                println!("Job done! Saved to {} in {:?}", output_file, duration);
                // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª.
                let _ = fs::remove_file(&tmp_svg_path);
            }
            Ok(s) => eprintln!("rsvg-convert failed with code: {}", s),
            Err(e) => eprintln!("Failed to execute rsvg-convert: {}", e),
        }
    }
}
