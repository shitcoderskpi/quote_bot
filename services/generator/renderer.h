//
// Created by mmatz on 8/4/25.
//

#ifndef RENDERER_H
#define RENDERER_H
#include <Magick++/Functions.h>
#include <Magick++/Image.h>
#include <Magick++/Include.h>
#include <memory>
#include <spdlog/logger.h>

#include "globals.h"
#include "image.h"
#include "rasterizer.h"

class renderer {
public:
    renderer() noexcept;
    ~renderer() noexcept = default;

    [[nodiscard]] Magick::Image render_image(const templates::image &img, const Magick::Point &density) const;

private:
    std::shared_ptr<spdlog::logger> logger;

    static Magick::Point calculate_offsets(const Magick::Image &t_img, const Magick::Image &bg, const pango::text &text, const pango::raster_text &r_text, const
                                           Magick::Point &scale);

    static double calculate_baseline(const pango::raster_text &raster, const Magick::Point &scale);

    static long alignment_to_offset(const PangoAlignment &alignment, const long &text_width);
};

inline renderer::renderer() noexcept {
    Magick::InitializeMagick(nullptr);
    logger = logger_init("renderer");
}

inline Magick::Image renderer::render_image(const templates::image &img, const Magick::Point &density = Magick::Point(300, 300)) const {
    Magick::Image bg;
    bg.backgroundColor(Magick::Color("transparent"));
    bg.density(density);
    bg.read(Magick::Blob {img.background.data(), img.background.size()});

    const Magick::Point scale {density.x() / 96, density.y() / 96};

    logger->debug("Img scale: x={}|y={}", scale.x(), scale.y());

    const size_t img_texts_size = img.text_entries.size();
    std::vector<std::pair<Magick::Image, Magick::Point>> render_results {img_texts_size};

    // Fancy parallel rendering
    /*
⠀⠀⠀⡀⠀⠄⠠⠀⠄⠠⠀⠄⠠⠀⠄⠠⠀⠄⠠⠀⠄⠠⠀⠄⠠⠀⠄⠠⠀⠄⠠⠀⠄⠠⠀⠄⠠⠀⠄⠠⠀⠄⠠⠀⠄⠠⠀⠄⠠⠀⠄⠠⠀⠄⠠⠀⠄⠠⠀⠄⠠⠀⠄⠠⢀⠂⠄⢂⡐⢀⠂⠔⢠⠂⠔⡠⠂⡔⢠⠂⡔⢠⠒⢄⠒⡄⢒⡐⢂⠒⡐⢂⠒⣄⠣⢜⡠⠣⢜⡠⢣⠜⡤⢣⠜⡤⢣⠜⡰⢃⠞⡰⢃⠞⡰⢃⠞⡰⢃⢎
⠀⠈⠄⠠⠁⠌⡀⠡⠈⠄⠡⠈⠄⠡⠈⠄⠡⠈⠄⠡⠈⠄⠡⠈⠄⠡⠈⠄⠡⠈⠄⠡⠈⠄⠡⠈⠄⠡⠈⠄⠡⠈⠄⠡⠈⠄⠡⠈⠄⠡⠈⠄⠡⠈⠄⠡⠈⠄⠡⠈⠄⠡⢈⠐⠠⢈⠐⢂⠐⡈⠰⢈⠂⠜⡐⠠⡑⠐⡂⠥⢈⠆⡘⠄⢣⠘⠤⡘⢄⠣⡑⢌⠒⡄⢫⠰⢌⡱⢢⡑⣃⠎⡔⣃⠎⡔⢣⢎⡱⣉⢎⡱⣉⢎⡱⣉⢎⡱⣉⠦
⠀⡀⠂⢁⠈⠠⠐⡀⢁⠂⠄⡁⠂⠄⡁⠂⠄⡁⠂⠄⠡⠐⠠⠁⠌⠠⠁⠌⠠⠁⠌⠠⠁⠌⠠⠁⠌⠠⠁⠂⠄⡁⠂⠄⡁⠂⡁⠐⡈⠠⠁⠌⠠⠁⠌⠠⠁⠌⠠⠁⠌⡐⠠⢈⡐⠠⢈⠄⠊⢄⠁⠎⡈⠔⣈⠡⡐⢡⠘⡠⢃⠰⡈⠜⡠⢊⠔⡡⢂⠱⡈⢆⠡⡜⢡⠎⡒⢤⢃⠦⢡⠚⠴⡨⠜⣌⠣⢆⡱⢌⠦⡱⢌⠦⡱⢌⠦⡑⢆⠭
⠀⠐⠈⡀⠌⠐⠠⠐⢀⠂⡐⠀⡁⠂⠄⡁⠂⠄⠡⢈⠐⡈⠄⠡⠈⠄⠡⠈⠄⠡⠈⠄⠡⠈⠄⠡⠈⠄⠡⠈⠄⡐⠈⠠⢀⠡⢀⠡⠐⢀⠡⠈⠄⠡⠈⠄⠡⠈⠄⠁⠂⠀⠁⠀⠀⠁⠀⠈⠀⠈⠐⠠⠁⠒⡀⢆⠁⠆⡑⠰⡈⠔⡡⢊⠔⡈⢆⠱⡈⢆⠱⣈⢒⡑⢪⠰⣉⠆⡎⡜⣡⢋⠖⣡⢋⠴⣉⠦⡑⢎⠲⡑⢎⠲⡑⢎⢲⡉⠮⡜
⠀⢁⠂⢀⠂⢁⠂⠌⢀⠐⠠⠁⠄⡁⠂⠄⠡⢈⠐⡀⢂⠐⠈⠄⠡⠈⠄⠡⠈⠄⠡⠈⠄⠡⠈⠄⠡⠈⠄⡁⢂⠠⠁⠂⠄⢂⠠⠐⠈⠀⠀⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠘⠤⢁⠃⡜⢠⠑⡌⢢⠑⡌⢢⠑⣌⠒⡤⢃⡜⡡⢓⢌⠲⡱⡘⢤⢋⡜⢤⢋⠲⡡⢎⡱⢊⠵⣉⢎⡱⢩⠎⢦⡙⢲⢩
⠀⠄⠂⠠⢈⠠⠐⢈⠠⢈⠐⡈⠄⠠⠁⠌⡐⢀⠂⡐⠠⢈⠐⡈⠄⠡⠈⠄⠡⠈⠄⠡⠈⠄⠡⠈⠄⡁⢂⠐⠠⠐⢈⠐⠈⠠⠐⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠁⠊⠔⡡⢊⠰⡁⢎⡐⢡⢊⠤⡙⠤⢃⠲⣁⠏⣌⢣⠱⣉⢆⠣⡜⢢⢍⠲⡑⢎⡔⣋⠖⣡⠞⣌⢣⢚⠥⡚⢥⢣
⠀⠂⠌⠐⠠⠐⢈⠠⠐⡀⢂⠐⡈⠄⡁⢂⠐⡀⠂⠄⡁⠂⠄⡐⠈⠄⠡⠈⠄⠡⠈⠄⠡⠈⠄⡁⢂⠐⡀⢂⠡⠐⡀⠌⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠡⢂⡑⢢⠘⢤⠊⢖⡩⠜⣡⠓⣌⠚⡤⢃⠳⡌⢎⡱⡘⢥⢊⠵⣉⠶⡘⡤⢛⠤⣋⠴⣃⢎⢣⠹⡘⢦
⠀⡁⠂⢁⠂⠌⠠⠐⠠⠐⡀⢂⠐⠠⠐⡀⠂⠄⡁⠂⠄⡁⠂⠄⢡⠈⠄⠡⠈⠄⠡⠈⠄⡁⢂⠐⡀⢂⠐⠠⠐⠠⠐⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠜⡠⣉⠦⡙⢤⢊⡕⢢⡙⢤⢋⠴⣉⠖⡩⢆⡱⣉⢆⣋⠖⣡⢎⡱⢜⣡⢋⡴⢃⠞⣜⢊⠷⣙⠦
⠀⡐⠈⠠⠐⢈⠐⠈⠄⠡⠐⠠⠈⠄⠡⢀⠁⠂⠄⡁⢂⠄⢡⠈⢄⡈⠤⠁⠌⠠⠁⠌⠐⢀⠂⡐⢀⠂⠌⠠⢁⠂⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠠⠀⡄⢂⡅⢢⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠱⡐⢆⠹⣄⠣⡜⣡⠚⡤⢋⠖⡡⢎⡱⢊⡴⢡⠎⡴⣉⠶⣈⢖⡡⢎⠧⣜⡩⢞⡬⢋⠶⣩⠞
⠀⠄⡈⠄⢁⠂⡈⠐⡈⠄⡁⢂⠡⢈⠐⠠⠈⠌⡐⠠⡁⠌⡠⠌⠠⠐⠠⠁⠌⢂⠡⢈⠐⡀⢂⠐⠠⠈⠄⠡⠀⠀⠀⢠⡚⣍⢢⠁⠠⠀⠀⠄⠀⠠⠀⠐⡀⠡⠈⠄⠂⠥⣈⠧⡘⢥⢪⡙⡔⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠍⡜⢒⡌⡓⡜⢤⢋⠴⣉⢎⡱⢊⡴⢣⠜⣡⢚⡔⢣⢎⡱⢎⡱⣋⡜⢦⡙⢦⡙⣎⠳⣥⢛
⠀⠂⠄⡈⠄⡐⠠⢁⠐⠠⠐⡀⠂⠄⡈⠄⡑⠂⠌⡐⠄⠒⢠⠈⠡⠌⠡⢈⠐⡀⢂⠂⠰⠐⠠⠈⠄⠡⠈⠄⠀⠀⣔⣻⠶⠌⠂⠃⠀⠀⠀⡀⠠⠀⡐⠠⢀⠡⠈⢌⡡⢣⡝⣰⢩⢖⡡⢚⠤⠡⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⡜⡡⢎⡱⡘⢦⡉⢖⡡⢎⠴⣉⠖⣡⠞⣡⠎⣜⢣⢎⡵⣩⢖⡱⢎⢧⣙⢮⡱⢎⡳⢬⢫
⠀⡁⠂⠄⠐⡀⠂⠄⡈⠄⠡⠐⡈⢐⠠⠡⢀⠃⡰⠐⡈⠌⠄⠌⠡⡈⠔⠠⢈⠐⠠⡈⠄⡑⢂⠡⠈⢄⠡⠀⠀⣾⣌⡁⠘⠂⠡⠀⠀⠈⠀⠀⠀⠀⠀⠀⠀⢀⠀⢢⠑⡡⢌⠱⣌⢊⡵⢋⡄⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡑⣌⠲⣉⠦⡙⢦⠱⣊⠵⣨⢎⡱⢎⠵⣚⢬⠓⡎⢶⡱⢎⡵⣋⠞⣜⠦⣝⢮⣙⢎⡳
⠀⡐⠠⢈⠐⠠⠁⢂⠐⡈⠄⠡⠐⠂⠄⠃⠤⠁⠤⢁⠰⢈⠰⢈⠡⠐⡈⡐⢂⠉⡐⠤⠘⡀⢂⠌⡁⠂⠄⠀⣼⡶⢈⠀⠆⡐⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠐⢀⠐⡠⢡⠡⢌⠣⠔⢮⣌⣁⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡳⢌⡓⡌⢖⡩⢆⢇⢣⢞⡰⢪⡱⢎⠶⣩⢎⡝⣎⢧⣙⢮⠲⣍⡻⣌⠻⡜⢦⡹⢎⡵
⠀⠐⡀⢂⠈⠄⠡⢀⠂⡐⠈⠄⡑⡈⠌⠌⣀⠣⠐⡈⠰⢀⠂⠆⡐⠡⠐⡐⠠⢁⠂⠤⠁⠔⢂⡐⠈⠔⠀⢠⡟⠐⠻⡀⠀⠀⠀⢘⠠⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⢎⡙⢢⡌⢭⣙⢻⣤⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠱⢎⠴⣉⠦⡱⢊⡎⣎⠦⣍⢧⡱⢎⡳⡱⢮⡜⣎⠞⡜⢮⣙⢦⠳⡼⡹⣜⢣⣝⠺⣜
⠀⠡⠀⢂⠈⡐⢀⠂⠄⠠⢉⠐⡠⠐⠨⢐⠀⣂⠡⠐⡁⠢⢘⠠⢘⡀⠣⢐⡁⢂⠡⢂⠉⡰⠀⠤⢉⠐⠀⣸⣀⡎⠀⡇⠀⠀⠞⠈⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠱⣘⢢⡍⣎⠳⢟⡧⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⣌⠲⡡⢎⡱⣋⠴⡣⠝⢦⢎⡜⣣⢳⣙⠦⡽⣌⢯⣙⠮⡜⣎⢳⣱⢣⡝⢮⡜⣹⡜
⠀⢁⠂⠄⢂⠐⠠⠈⠄⣁⠢⠌⠠⠡⢁⠂⡡⢀⠂⠅⠢⠑⢂⠡⢂⠰⢁⠢⠐⣁⠂⠆⡡⠠⠑⡀⠎⡐⠀⣿⠯⢵⠀⠘⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠣⡜⣈⡛⢞⣶⣹⠆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢱⢊⠵⡑⢎⡲⢍⡖⢭⡛⡜⢮⡜⣥⡓⢮⡝⡲⣍⠶⣩⢞⡱⣎⢧⢣⠟⣜⠧⡽⡱⢞
⠀⢂⠈⡐⠠⠈⠄⡁⠂⠄⢂⠌⡁⠢⢁⠒⡀⠆⡘⡈⡁⠎⢠⢁⠊⡰⠈⡄⢃⠄⢊⡐⠁⠆⡑⠐⠄⠀⠘⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠄⠉⠒⢡⡜⡰⠓⢎⢳⡭⢟⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢣⡍⣲⠙⣎⢱⢣⠞⣥⢫⡝⢦⡝⢦⡙⢧⡚⡵⣊⢗⣣⢯⡱⣎⢯⡹⢞⡭⢞⡵⣋⢯
⠀⠌⠠⢁⠂⡐⠠⢁⠂⠔⡈⠄⠡⠂⠌⠤⠡⡐⠡⣁⠃⡰⠈⢌⢂⠡⢂⠡⡘⢀⠎⣁⠒⢠⢁⠂⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⢀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣁⡡⢖⠸⣜⣳⢮⡅⠀⠀⠀⠀⠀⠀⠀⠀⡠⠀⠀⠀⢮⡱⢋⡖⢭⡚⣜⠲⣍⠮⣕⢮⡱⢎⡗⣎⢳⡥⣛⡼⣍⢮⢳⡹⣬⢳⡼⣱⢎⣧⢻⡜
⠀⢂⠡⢀⠂⠄⡁⠂⠌⡐⠠⢊⠡⠘⡈⢄⠃⡰⠁⡄⢂⠅⡘⡀⠆⡁⠆⢡⠐⣁⠢⢐⠨⡀⢀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠩⠀⡐⡿⡭⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠠⢉⢈⠱⣈⠛⡬⢭⠖⡭⠀⠀⠀⠀⢠⢆⣴⡋⠹⢧⠀⠈⠰⡍⢧⡚⢦⡹⣌⠗⣎⣳⢚⠦⣝⠺⣜⡼⣲⢹⣜⣲⣙⢮⣳⢳⣎⢷⣹⢣⡟⣼⢣⡟
⠀⢂⠐⠠⢈⠐⠠⢁⠊⠄⣁⠂⠄⢃⠌⡰⠈⡄⡑⠰⢈⠰⡀⢅⠂⠥⠘⡠⠘⡀⠆⡁⠆⡁⠆⡠⢀⡚⠃⠀⠀⠀⠀⠀⠀⠀⠀⡌⣥⢃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡄⠒⢤⣀⢊⠶⣡⠖⣌⡙⢿⡱⠂⠀⠀⠀⠸⡟⠺⣑⣀⡀⣀⠀⠨⣙⠦⡝⢦⠳⣌⠻⣔⢣⢏⡞⣜⢫⡖⡵⣣⢏⡖⣧⢏⡾⣡⢻⡜⣮⢳⣫⢞⡵⣫⢞
⠀⠂⠌⠐⠠⢈⠐⠠⠌⠂⡄⠌⠒⣈⠰⠠⢑⠠⢂⡑⠨⡐⢐⡈⢌⠰⠁⡔⠡⠌⡐⡁⠆⢡⠂⢡⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢒⠸⢴⢫⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠤⡑⢬⡙⢦⠈⢌⠓⠙⡚⢤⠛⢦⠙⠀⠀⠀⠀⠰⠀⡇⠀⠀⠀⠀⠁⠀⢣⠳⣜⠣⣏⡜⡳⢎⡝⡦⠽⣌⡳⢞⣱⡹⢮⡝⣞⢮⡵⣋⢷⡹⣎⠷⣭⢞⣱⢏⡾
⠀⠡⠈⠄⡁⠂⠌⡐⠈⡔⠐⡈⠥⠐⢂⠡⢊⠐⡂⢄⠃⠤⣁⠐⡂⢌⠂⡄⢃⠂⢅⠰⢈⠂⡜⠠⢡⠀⠁⠚⠀⠀⠀⠐⠀⢌⡈⢷⢮⣳⡟⢇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢂⠉⠲⡰⢡⠋⠦⠙⢆⡹⠀⠋⠂⠁⠀⠀⠀⠀⣯⢄⡈⡖⠀⠀⠀⠀⠀⢨⠗⣎⠳⣆⠽⣱⢫⡜⡳⣝⡼⣹⡝⣲⡝⣧⢻⡜⣧⠯⣝⢮⡳⣝⢾⡱⣏⢾⡹⣞
⠀⡁⠌⠐⡀⢁⠂⠄⠃⠄⡡⠂⠆⡉⠄⡃⠄⡃⠌⢄⠊⠔⡠⢑⠨⠄⢃⠌⢂⠩⠄⢢⠁⢎⠠⡑⠂⢠⡄⠀⠀⠀⠠⠀⠐⡌⠙⠈⠉⠀⠀⡀⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠁⠀⠃⠹⡌⠱⣀⠩⠁⠀⠁⠀⠀⠀⠀⠀⢿⠠⡷⠙⠆⠀⠀⡀⠀⣬⢛⡬⠳⡜⣎⢵⡣⢽⡱⢎⡵⢣⡻⣥⢻⡜⣧⢻⡼⣹⢎⡷⣹⢎⡷⣹⢎⡷⣻⢼
⠀⡐⠠⢁⠐⠠⢈⠐⡉⠰⠠⢑⠨⠄⢃⠰⢁⢂⡉⢄⠊⡔⠁⢆⠡⢊⠔⡈⠆⡡⢊⠄⡩⠄⢢⠁⠀⣾⣏⣠⠀⠐⡇⠀⠐⢘⠋⠟⠋⠉⠙⠻⠌⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠄⡀⠀⠀⠑⠈⠁⠀⠀⠐⠀⠀⠀⠀⠀⠀⠀⠠⣼⡀⠀⣠⠂⠀⠀⣜⢦⢫⡜⣣⠝⣜⡲⣝⢦⡻⡝⣞⢧⡻⣜⢧⡻⣜⢧⡻⣵⢻⣜⢯⡻⣼⢫⡟⣼⢳⢯
⠀⡐⢀⠂⠄⡁⢂⡐⢈⠡⡘⠠⠒⣈⠢⢁⠎⣀⠒⡨⠐⡌⢡⠊⢄⠃⠤⡑⢨⠐⢢⠘⢠⠘⡄⢡⠀⣿⣿⠙⠀⠀⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠆⡐⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠟⠤⠈⣀⠔⠁⡼⣘⢎⢧⡚⣥⠻⣌⠷⣎⢷⡹⣝⢮⡳⣝⢮⡳⣝⢮⣏⢷⡹⣞⡼⣳⢽⣣⢟⡽⣺⡝⣾
⠀⡐⠀⠌⠠⠐⠠⠐⣈⠰⢀⢃⠡⡐⠄⣃⠰⠠⡑⠄⢣⠐⡡⠌⢂⠜⡐⠌⡄⢃⠂⡍⢠⠃⢌⠰⡀⠹⣿⡀⠀⠀⠀⠐⠀⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣉⡠⠀⡺⣅⢏⡞⢦⣛⡴⣛⣬⢻⡜⣧⢻⡜⣧⢻⡜⣧⣛⢮⡗⣮⣳⢻⡼⣝⢧⣻⢼⣫⠾⣵⢻⡼
⠀⠄⠡⢈⠀⡑⢂⠡⠀⢄⠡⢂⠡⡐⠌⡄⢢⠑⡠⢉⠄⢢⠡⠘⡄⢊⠔⠨⡐⠌⢒⡈⠔⡈⢆⠱⢐⡀⠹⣧⠄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢿⡿⡄⢐⡳⡜⢮⡘⣧⢚⡴⣳⢬⡳⣝⢮⡳⣝⢮⡳⣝⡶⣹⡞⣽⢣⢯⡳⣽⢺⣝⢮⣳⡭⢿⣜⣳⢻
⠀⠌⡐⢀⠂⠰⢀⠂⠍⡠⢂⠡⠒⡈⠔⡠⢃⠰⢁⠌⡘⠤⡈⢅⠢⢁⢊⠡⡐⢩⠐⢌⠢⢑⡈⢆⠡⠄⠀⢻⠀⠀⠀⢠⡤⠔⠀⠀⠀⠀⠀⠀⣠⠀⣤⡀⠄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣇⠆⢠⠳⣍⠞⣵⢪⡝⣞⡥⣏⢷⣩⢞⡵⣫⣞⡽⣎⢷⡳⣽⢺⡭⢷⡻⣜⢯⡞⣽⡲⣽⢳⡞⣭⣟
⠀⠂⠐⠠⢈⠐⡈⠌⢂⡁⠆⢡⢂⠱⢈⠔⢂⠡⢊⠤⠑⡠⠑⡂⠜⡠⠊⡔⢁⠆⡩⠐⡌⢢⠘⡄⢣⠈⠀⠀⠀⠀⠀⠋⠀⢀⢰⡄⠀⠠⠛⠂⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣟⡥⢐⠯⣜⡹⣆⠟⡼⣜⡳⣝⢮⣳⣋⡾⡵⣎⢷⡹⣧⢟⡼⢧⡻⢧⡻⣝⡮⡽⣖⡻⣵⢫⣞⣳⢞
⠀⠂⠌⠐⠠⠈⠤⠉⡄⢢⠘⢄⠢⡁⠎⠰⡈⠆⡡⢂⠱⡀⢣⠘⠤⣁⠣⡐⠌⠤⣁⠣⡘⢄⠣⡘⢄⠣⠀⠀⠀⠀⠀⠀⢠⣌⠀⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣳⢯⡔⡻⣔⢣⡟⡼⣳⢭⡳⣝⡮⣵⢻⣜⡳⣏⢯⢷⡹⣞⡽⣫⢽⣫⢷⡹⣞⡵⣏⢷⣭⡻⣜⢧⣟
⠀⠡⠈⠄⠡⢁⠢⢁⡐⠂⡅⢊⠰⢠⠉⢆⠡⢂⠥⢈⠆⡑⢄⠊⡔⢠⢂⠱⣈⠒⠤⡑⢌⠢⡑⢌⠢⢡⢉⠀⠀⠀⠀⢀⣷⡿⠇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣿⣓⠦⣹⡌⣧⣛⠶⣹⢎⡷⡹⣞⡵⣏⢾⡹⣞⡽⣎⠿⣜⣳⡭⢷⡹⣞⡽⣎⢷⣛⡞⣶⢽⡹⣞⢾
⠀⡁⠂⠌⡐⠠⢂⠡⢀⠣⠌⢂⠅⢢⠉⡔⡈⢆⠢⣁⠒⠌⡄⠣⢌⠂⡌⠒⠤⡉⠒⡌⢢⠑⡌⢢⠑⠢⢌⠂⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⢷⣋⠷⡰⣏⠶⣭⢞⡵⣫⢞⡷⣹⢞⡭⣷⢫⢷⡹⣞⢯⡽⢮⣝⢯⡽⣺⢵⣫⢟⡼⣝⢮⣗⣻⢼⣫
⠀⠄⡁⠂⠌⡁⠆⠌⡂⢅⠊⡔⡈⢆⠡⢂⡑⠂⠥⡐⠌⡒⠌⡒⠌⡒⠌⡑⢢⢁⠣⡘⢄⠣⡘⢄⡉⠒⡌⡘⠀⠀⠀⠀⠀⠀⠤⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣼⢯⡷⣍⡞⡱⢎⡻⢖⡯⣞⡵⣻⠼⣏⡾⣝⢮⣏⢷⡻⣼⢫⠾⣝⢮⡻⣼⢳⣏⠾⣭⢻⡼⣳⢮⡳⣏⡾
⠀⠂⠄⡁⢂⠡⠘⡠⠡⠌⢒⠠⡑⡈⢆⠡⠌⡑⢢⠁⠎⡄⢣⠘⠤⡑⢌⠰⡁⠎⡰⢁⠎⡰⢁⠆⡌⠱⢠⢁⠋⡤⠀⠀⠀⠈⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣒⢿⡞⣳⢞⡽⢺⡅⢫⢗⡫⢞⡵⢺⡭⣟⢮⠷⣭⢷⡺⣭⠷⣭⢯⡻⣭⢗⣯⢳⣏⠾⡽⣭⢷⡹⢧⣏⡷⣝⡾
⠀⡁⢂⠐⡈⠄⡑⠤⠑⡌⠢⠑⠤⡑⡈⢆⠱⡈⠆⣉⠒⠌⠤⣉⠒⢌⠢⢡⠘⠤⡑⠌⢢⠑⡌⠢⢌⡑⠢⢌⠐⠆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡄⢾⣡⢳⣯⢛⣽⣛⡞⣧⠯⣜⠰⢯⣹⢫⠞⣷⢹⢮⣏⠿⣼⢣⡟⡵⢯⡳⣏⠷⣽⢺⡼⣳⢞⡯⡽⣎⡷⣹⡳⣞⡵⣻⣞
⢀⠐⠠⢈⡐⡈⠔⣈⠒⡈⠥⡉⢆⡑⢌⠢⡑⠌⡒⠤⡉⠜⡰⢠⢉⠢⡑⠢⣉⠒⢌⡘⠄⠣⢌⡑⠢⢌⡑⠂⠠⠖⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⠲⢌⡲⡙⠆⢏⡓⣮⢟⣗⣏⡿⠴⣻⣌⠃⢻⠦⣏⡟⢧⣛⠾⣜⢯⡳⢯⡝⣯⢏⡷⣝⣻⢼⣫⠷⣝⣮⢽⡳⣝⢾⡱⣟⣼⢻⡵⣯
⠀⡈⠐⠠⡐⡈⠔⠠⡑⠌⢢⠑⠤⡘⠤⡑⢌⠢⢑⠢⠑⡌⠰⠡⢌⠢⣁⠣⢄⡉⠆⡌⢌⡑⠢⢌⡑⠢⢌⠡⡀⠒⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡀⠒⡄⠳⣌⠒⡩⠙⣌⠳⡳⣞⡾⣭⡞⣷⡱⣞⣣⠈⢷⣣⠟⣧⢏⡿⡜⣧⢻⣭⢻⡜⣯⢞⡽⣎⡷⣭⢟⡾⣜⡧⣟⡽⣺⡵⣯⣞⣯⣽⣳
⠀⠄⡉⡐⠤⢁⢊⠡⡐⡉⢆⠩⡐⢡⠒⠌⡄⠣⢌⠢⡑⢌⠡⢃⠌⡒⠤⠑⢢⠘⡰⢈⠆⡌⡑⠢⢌⠱⣈⠒⠄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡐⠂⠌⡑⢌⠱⢌⢃⢡⢋⡔⢣⣳⡙⣶⣷⣻⢯⣽⢣⡗⡂⠀⢫⡽⣎⠿⣼⡹⣎⠷⣎⢷⡹⣎⠿⣜⢧⡻⣜⢯⡞⣵⢻⣜⡳⣧⢿⡵⣞⣳⣞⡷
⠠⢈⡐⠠⢂⠅⠢⡁⢆⠱⡈⢆⡑⠢⣉⠒⢌⡑⠢⡑⢄⠢⡑⢌⠢⡑⠌⡑⠢⡑⢄⢃⠒⠤⣁⠣⢌⠒⠤⣉⠒⡀⠆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠰⠠⢌⡡⢚⡐⢂⠒⡌⡘⢆⡣⠜⢦⡁⢿⣱⣞⣿⡻⣞⢿⣜⡱⡀⠀⠘⠩⢟⡶⣹⢭⣛⢮⢷⡹⣎⠿⣜⢧⡻⣜⢧⡻⣜⢧⣏⢷⣹⢾⣝⣯⢷⡽⣾
⠐⠠⠠⠑⢂⠌⡡⠐⡌⢢⠑⡂⢌⠱⢠⢉⠢⡐⢡⠘⠤⡑⡈⢆⠡⡘⠤⣁⠣⡘⢄⠊⡜⠰⣀⠣⢌⡘⠰⣀⠣⢘⠰⢀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠐⠠⡁⢇⠆⢲⠡⠎⣡⠚⡄⡙⢦⠙⣘⢦⡙⢮⡱⣞⢿⣹⣏⡿⡜⣧⢃⠈⠰⢀⠀⠉⠁⠛⠊⠟⢮⠷⣭⣛⡮⣏⢷⡹⣎⢷⡹⣞⡼⣣⢟⣮⠽⣮⢟⣾⣳
⠈⠄⢃⡉⠄⡊⠔⡡⠘⡄⢣⠘⡄⢃⠆⡌⢢⠑⢢⢉⠒⠤⡑⠌⢢⠑⠢⢄⠣⡘⢄⠣⢌⠡⢂⡑⠢⢌⠱⣀⠣⢌⠢⣁⠒⠤⣀⢀⡀⣀⠀⡀⠀⣴⣤⣤⣀⠀⠀⠀⠀⠀⠀⠀⠡⢘⡈⢖⢣⣉⠚⡐⢦⠘⠁⣊⠜⣢⠳⣜⢣⡝⣞⢾⣽⣺⠽⣝⣧⡛⡔⢢⠄⠈⠄⡡⠂⠄⠠⠀⢀⠀⠉⠑⠋⠞⠷⣹⢮⣳⡝⣾⡱⢯⣞⢿⣱⡟⡾⣽
⠈⠌⡄⠰⠡⡘⠤⢁⠣⡘⢄⠣⠘⡄⢊⠔⡁⢎⠰⡈⠜⡠⠑⡌⢢⢉⠒⡌⢢⠑⡌⠒⡌⢢⠡⢌⡑⢢⠁⢆⡘⢄⠣⢄⡉⢲⢈⠲⠤⣑⢊⡱⠂⣿⣿⣿⣿⡑⠀⠀⠀⠀⠀⠀⢀⢡⠚⡌⢶⡌⢣⠙⡀⢄⠳⣈⠝⣢⠟⣭⢳⡟⣼⢫⡾⣽⣋⡷⢮⡱⢌⡃⡐⢈⠐⠠⠑⡈⠄⠁⠠⢀⠂⠀⠄⠀⠀⠀⠈⠁⠛⠶⢛⣧⡟⣾⢳⣽⢻⡽
⢈⡐⠤⠡⡑⢄⠣⢌⠢⡑⡈⢆⠱⡈⢆⡘⠰⡈⢆⠱⡈⠔⡡⠘⡄⢊⠔⡈⢆⠱⡈⢅⠢⣁⠎⡰⢌⠢⡉⠆⡌⢢⠘⠤⡘⣡⢊⡱⡘⢤⠣⡜⡁⢼⣿⣿⣿⣟⠃⠀⠀⠀⠀⠠⠈⢄⠓⡬⠳⣉⠆⠐⠨⠌⠒⣌⢹⠲⣍⣟⣻⣼⢣⣯⢳⢿⡽⣓⣮⢱⢊⡴⢡⠆⡌⠄⠁⠀⡀⠠⠁⠠⠈⠀⠀⠂⠈⢀⠐⠀⠀⠀⠀⠀⠙⠋⠿⣞⣯⣽
⠠⡐⢂⠱⠐⡌⢒⠨⡐⢡⠘⡄⢣⠐⠢⢌⡐⠰⡈⢆⠱⡈⠔⡡⠘⡄⢊⠔⡈⢆⠱⣈⠒⡄⢚⠰⡈⢆⠱⡈⠔⡡⢊⠒⣅⢒⠢⡑⡜⢢⠓⣬⢁⢸⣿⣿⣿⣯⡃⠂⠀⠀⠀⠀⠈⠀⣉⠰⡓⠤⠈⠄⠡⢈⠵⣈⠶⣙⠾⣜⠧⣯⢷⣎⠿⣩⣞⣿⢢⢧⢫⣔⢫⡜⢡⠀⠀⠀⠀⠀⠀⠁⠀⠀⠁⠀⠁⡀⠠⠈⢀⠐⠀⠀⡀⠀⠀⠀⠁⠛
⠐⠤⡁⢎⠰⡈⢆⠱⡈⢆⠱⡈⠤⣉⠒⠤⣈⠱⡐⢌⢂⠱⡈⠔⡡⠘⡄⢊⠔⣈⠒⡄⢣⠘⡌⢢⠱⡈⢆⠱⡈⠴⣁⠣⡔⢊⠥⢓⡌⢣⡙⢤⢋⠘⣿⣿⣿⣿⣿⡦⠀⠀⠀⠀⠀⠐⢀⠣⢉⠆⠁⡐⠠⠌⢂⡱⢪⡝⣏⠾⣜⢣⡿⣞⢧⡟⣾⡹⣯⢛⡖⣬⠓⡬⢡⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠂⠀⠀⠐⠀⠄⠀⠀
⢈⠒⢨⠐⣂⠱⡈⠔⡡⢊⠔⢡⠒⠤⣉⠒⡄⢃⠜⡠⢊⠔⡡⢊⠔⡡⠘⡄⢊⠄⢣⠘⡄⠣⢌⡡⢒⢡⠊⡔⢡⠒⡄⡓⢌⠣⢎⡅⢎⡱⡘⢦⢩⠀⣿⣯⣻⡿⣿⣿⣶⠀⠀⠀⠀⠀⠠⢈⠰⠈⠀⠀⡀⠄⢢⡑⢣⠞⣬⣓⠮⣣⠗⣽⢾⡼⢥⡛⢷⡟⡼⢢⡙⠤⢁⠂⠄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠠⠀⠂⠀⠂⠀
⠠⢊⠄⠣⢄⠣⡘⠤⡑⢌⡘⢄⠊⡔⢠⢃⡘⢄⠊⡔⢡⠊⡔⢡⠊⡔⢡⠘⠤⡉⢆⠱⡈⠕⣂⠆⡃⠦⡑⠌⡆⢣⠜⡌⠦⣙⠢⡜⢢⡱⡉⠒⢀⣤⣿⣿⣿⡆⣹⠻⠿⣀⠀⠀⠀⠀⠐⠀⢂⠁⠀⠐⢀⠘⠤⡘⢥⢚⡵⣉⠖⡱⢞⡥⣻⡼⣣⢝⠻⣜⢧⠓⡜⣀⠂⠌⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠐⡡⢊⠱⢈⠆⡱⠐⡌⢂⠌⢢⠑⡌⢂⠆⡘⢄⠣⡘⢄⠣⡘⠄⢣⠘⠤⡉⢆⠱⡈⢆⡉⠖⡰⣈⢑⠢⢡⠓⢬⠡⠎⡔⢣⠆⡓⠌⢁⣠⣴⣾⣿⡿⣿⣿⣿⡇⢺⠙⡶⢶⡀⠀⠀⠀⠀⠂⠀⠀⠀⠀⢀⠩⢄⡙⢤⠳⡰⢁⢊⡕⢪⡐⠳⡜⠳⢎⡱⢘⠦⠛⡰⢀⠊⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⡈⠔⡡⢊⠔⡨⢐⠡⡘⢄⠊⡄⢣⠘⡄⢊⠔⡈⢆⠱⡈⢆⠱⡈⢆⡉⢆⠱⡈⢆⡱⢨⠐⠣⡔⡈⢆⢩⠂⣍⠢⢃⡍⠲⠁⣠⣴⢾⡿⣿⣿⣿⡏⠀⣿⣿⣿⣷⢸⣇⠘⠳⠄⠠⠀⠀⠀⠀⠀⠀⠀⠀⢀⠚⠴⡈⢦⠡⠑⢂⠂⡌⠥⣈⠣⢍⠓⢌⡐⠉⡄⠃⠄⠡⠀⠂⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠠⢃⠔⡡⢊⠔⡡⢂⠱⣈⠒⡌⢢⠑⡈⢆⡘⠰⡈⢆⠱⡈⢆⠑⢢⠘⡌⢢⢑⢢⠰⢡⡉⡱⢀⡓⢌⠢⣑⠢⠍⠂⣠⣴⣿⣟⣿⡿⢿⡿⢷⡈⠁⠀⣿⣿⡟⣿⡄⢻⡂⠈⠱⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡘⢲⠱⡀⠃⠌⠀⠀⠀⠂⠀⠀⠀⠀⠀⠀⠁⠀⠀⠈⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⢁⠎⠰⠡⢌⠢⡑⠌⡒⢠⠃⡔⢡⠊⡔⠢⢌⠱⡈⢆⠡⡘⠤⡘⡄⢣⠌⣡⢊⠴⡉⢆⠥⡑⢣⡘⠤⢃⠆⠉⣠⡞⠿⣷⡭⣟⠸⡝⠂⠙⠀⠀⠀⠀⣼⣿⣷⡜⣿⡌⣷⡄⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⠠⢃⠜⡠⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⡀⠄⡐⠠⢌⢂⠱⡈⠤⠁⠌⠀⠀⠀⠀⠀⠀⠀
⠌⡐⢂⠆⡘⢄⠣⡐⢡⠊⡔⢡⠊⡔⢡⠂⡜⢠⢃⡘⢄⠣⢄⠣⡑⠬⡰⢩⡘⣄⠣⢜⡠⠓⡬⢑⡔⠊⢀⣴⣿⣷⡄⠛⠥⢛⡀⢡⠀⠄⠀⠀⠀⣰⣿⣿⣿⣷⢹⣇⢻⣧⠀⠀⠀⠀⠀⠀⠀⠀⢊⠀⠀⠀⠘⠄⠁⠀⠀⠀⠀⠀⠀⠀⡀⢀⠀⠀⢀⠠⠀⠐⠀⠠⢀⠀⠄⠀⠂⠠⠈⠀⡁⠠⢁⠂⠌⡘⠄⠃⠄⠂⠀⠀⠀⠀⠀⠀⠀⠀
⡐⢡⠊⡰⢁⠎⡐⢡⢂⠱⡈⢆⠱⡈⢆⠱⡈⢆⠢⡘⢠⠃⢎⡰⢉⡒⢅⠣⡔⠢⢍⡒⠬⡑⢆⠃⢠⣼⣿⣿⣿⠯⢟⣡⠀⢂⡱⢂⠉⡀⠁⡰⢹⣿⣿⣿⣿⣿⣮⣿⠘⣿⡅⠀⠀⠀⠀⠀⠀⢀⣿⠀⠀⠀⠀⠀⠀⠀⢀⠀⠄⠢⢑⠢⢁⠀⠌⠀⠠⠀⠀⠂⠈⠀⠀⠀⠀⠈⠀⠀⠀⠐⠀⠁⠠⠈⠀⠄⠈⠐⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠠⢃⠜⢠⠃⡜⢠⠃⡌⢢⠑⡌⢢⠑⡌⢢⠁⢎⠰⣁⠣⡘⢢⢡⠣⢜⡨⠱⣌⠱⠊⠔⠃⠉⣠⠶⠟⣿⣿⣿⡿⢀⠈⡲⠦⠘⠀⠁⠀⠔⠢⠁⠛⠻⠍⠛⠆⠙⣍⣛⠻⣿⣷⡀⠀⠀⠀⠀⠀⣼⡛⠀⠀⢀⡔⠦⡑⠌⠀⠀⠀⠀⠀⠐⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠄⠈⠀⢀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠠⢈⡐
⠡⢌⠢⡁⢎⠰⠡⡘⢄⠣⡘⢄⠣⡘⢠⠃⡜⢢⠑⠤⢃⡱⠡⢆⢍⠲⠈⢁⣠⡴⡶⠚⠉⠁⠀⠀⠀⠀⣀⢖⡡⠈⣠⣶⢯⡱⣤⢲⡐⢂⠄⠀⢄⡀⠀⠀⠀⠀⠈⠙⠣⠙⢿⣆⠀⠀⠀⠀⣰⡿⠀⢀⣶⡾⣜⠡⠐⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⢀⠠⠀⠠⠀⢁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠄⣁⠢⡐
⠐⠢⡁⠜⡠⢃⠱⢈⠆⡱⠐⡌⢢⠑⢢⠑⡌⢢⡉⢆⠣⠔⠩⠂⣀⡴⢞⡋⣉⠡⢁⠡⠈⠀⠁⠀⠀⠠⢉⠞⠀⣴⣿⣿⡾⣝⣪⢥⡞⡱⢎⣒⠂⣀⠠⡀⢄⠢⠑⠀⠀⠀⠈⢘⠀⠀⠀⢴⡚⠀⢰⠟⠻⠟⠫⠔⡀⠄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠐⡀⠀⠠⢀⠀⠁⠀⠀⢀⠠⠀⠀⠂⠀⠀⠀⠀⠀⠀⠀⠀⡀⠄⠂⠐⡀⢂⠡
⢈⡑⠌⢢⠑⡌⢢⠁⢎⠰⢡⠘⠤⡉⠂⠑⢈⣀⡤⣤⢔⡲⣴⢺⠱⡎⢦⠱⣀⠣⠄⢂⠀⠁⠀⠀⠀⠀⠀⠀⣰⡿⡟⢯⠟⣶⣭⣓⢾⡱⢏⡀⠓⢄⠣⠐⡈⠄⠀⠀⠀⠀⠀⠈⠶⢠⡙⢮⠑⡐⠋⠒⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡈⠄⢁⠀⠠⠐⢀⠀⠀⠐⠠⠀⠂⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠄⢈⠐⢀⠂⡐
⠂⡌⡘⢄⠣⡘⢄⡉⠆⡑⠂⢉⣀⣤⣶⣿⣯⣛⣜⢧⣯⡵⣭⢳⡽⣘⠣⢱⠈⠆⢁⠂⠈⢀⠀⠀⠀⠀⣀⠞⣍⠳⡉⢆⡀⠹⠦⠍⣎⠑⡦⣉⠜⡀⠂⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢙⣚⠆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠄⡈⠐⠠⠈⠀⠌⠐⡀⢂⠈⠀⠁⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠌⠀⠀⢈⠠⠐⠀
⠌⡐⢡⠊⠔⡡⠂⠌⣠⣴⣾⣿⣿⣿⣿⣯⣟⣽⡿⣷⣻⡞⣧⢏⠲⢡⠋⡐⢈⠐⠠⠀⢁⠠⢀⢆⠲⡹⢌⡜⢂⠧⠑⢠⠂⠀⠀⡜⣈⠳⠐⠤⠈⠄⡁⠂⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢿⠉⠆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠐⠠⠐⡈⢀⠣⡐⡁⠒⡀⢀⠀⢀⠀⠁⡀⠀⢀⠀⠄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠀⠀⠁⠀⠄⠀⠁
⠠⡑⠂⡅⠊⢀⣴⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣛⠿⣝⢣⡝⢢⡍⠠⢁⠂⠐⠀⠀⠄⢂⠤⡚⡌⢎⡱⡱⠢⡜⢄⠊⠌⢀⠠⠀⠡⠐⡀⠢⢉⠤⢁⠂⠄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣶⡌⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡐⠠⢁⠡⢐⠢⡀⠔⢨⠁⠐⠀⢂⠀⠀⢀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠀⠠⠀⠈⠀
⠄⡡⠃⢠⣴⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠽⣫⠟⣭⠒⣌⢣⠘⠀⠠⠈⠐⡈⠔⡸⢘⠦⡱⡜⣌⢡⢃⠳⡈⠄⡂⠐⡀⢂⠐⠠⢡⢀⠑⠂⡌⠀⠄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⣧⡙⢷⡀⠡⠀⠀⠀⠀⠈⢀⠀⠠⢁⠂⠠⢁⠂⡜⢠⠂⠅⡈⠄⡂⠌⠐⠀⡀⠄⠀⠄⠂⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠁⠀
⠀⢠⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⣿⡓⢇⠫⡔⡩⠄⠁⠀⣀⠢⢁⠞⣘⠲⣡⠏⣦⡱⢍⡚⠤⠃⠄⢃⡐⢠⠡⡐⠀⠎⡀⢣⠈⢢⠁⡄⠉⠀⠈⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⡌⠻⢹⠆⠣⠀⠀⠀⠀⠀⠀⠀⡀⠠⠀⠌⡰⢈⠒⡨⠐⠤⠈⡄⠁⡐⠀⠄⠂⠀⠀⠀⠀⠀⠀⠐⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⣴⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⡹⢡⣉⠎⠑⠁⠀⠀⡀⢂⠤⢑⡎⢞⠥⢣⢇⡜⡤⠛⢢⠔⠃⣉⢂⡁⢆⢡⢒⡡⣉⡒⡡⢆⠡⢂⠑⡀⠠⠐⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢙⣿⠄⠂⡄⢃⠁⡀⠀⠀⡀⠄⠀⠀⠁⠌⡐⢄⠃⡤⢁⡘⠄⠃⠄⠁⡀⠂⠀⠄⠀⠈⠀⠀⠀⠀⠀⠀⠀⠀⠀⠂⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢭⢳⠡⠓⠀⠀⠀⠀⠀⠐⠀⢠⡘⣧⢺⠉⡖⣡⠎⡤⠃⡍⢢⠜⡠⢂⡡⢆⡄⢎⠤⡑⠦⠘⡔⢈⠒⡈⠐⠠⠁⢀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠏⠀⠀⠄⠀⠐⠀⠀⠀⠀⠀⠠⠑⡈⢰⠐⡌⠒⡄⢃⠠⠘⠀⠆⠂⠄⠐⠀⡀⠀⠂⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⣿⣿⣿⣿⣿⣿⣻⣷⣿⣿⣿⢣⠏⠀⠀⠀⠄⠂⠐⡀⠀⠐⣌⢣⡟⡤⢧⡛⢼⠡⢚⡰⢡⢉⠦⡑⠠⢃⢌⠲⠌⠔⢢⠑⠢⠑⠄⢂⡐⠀⠁⠂⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠄⠀⢈⡘⠀⠀⠀⠀⡐⠠⢁⠂⡄⢐⠠⠌⢤⡁⠌⠂⢂⠡⢀⠀⡁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⣿⣿⣿⣿⣿⣿⣿⣿⣟⢧⢃⠃⠀⠄⠈⡀⠂⠀⠂⠀⠀⠙⣼⢻⣦⣙⣇⣿⢨⢳⡍⢤⠣⣉⠦⢡⠃⠎⡐⠢⠜⡀⠢⠐⠠⠁⠌⠀⠀⡐⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠠⢀⠃⠀⠴⡀⢠⠡⠄⠡⢈⠆⡰⢈⠔⡈⠆⠤⠈⠄⠂⠀⠂⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⣿⣿⣿⣿⣿⣿⡟⢶⠚⡄⠂⠈⡀⠈⠐⠀⠀⠀⠀⠀⠀⣽⣻⣞⣭⣯⣷⣌⡯⢥⢞⡣⢒⡄⢋⠤⡉⠒⢡⠘⠠⠐⡀⠒⠠⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠠⢤⡀⣦⠸⠀⡔⢢⠒⠬⠑⣈⠌⡁⠎⡠⠐⠠⠐⠈⠄⠁⢀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠄⠈⠠⢈⠐⠀⠀
⣿⣿⠿⠻⠟⣳⡙⢎⠐⠀⠄⠁⢀⠐⠀⠀⠀⠀⠀⠀⢰⣦⣿⣿⣿⢏⠼⢛⡴⠣⠲⠔⠣⠜⠈⠄⠠⠉⢀⠠⠁⠂⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⢶⣾⢔⡣⣜⡐⠣⠙⣌⠓⣈⠂⠥⠈⠡⠌⠁⠈⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡐⠀⠆⠀⠂⠐⠀
*/
#pragma omp parallel for default(none) shared(img_texts_size, img, density, bg, render_results, scale)
    for (size_t i = 0; i < img_texts_size; ++i) {
#ifndef DEBUG
        const auto result = pango::rasterizer::raster(img.text_entries.at(i), scale);
#else
        const auto result = pango::rasterizer::raster(img.text_entries.at(i), scale, DEBUG_COLORS);
#endif

        Magick::Image text;
        text.density(density);
        text.read(result.width + WIDTH_PADDING, result.height, "BGRA", Magick::CharPixel, result.data.data());
#if TRIM
        text.trim();
#endif

        render_results[i] = std::make_pair(text, calculate_offsets(text, bg, img.text_entries.at(i), result, scale));
    }

    for (const auto &[img, offset] : render_results) {
        bg.composite(img, Magick::Geometry{0, 0, static_cast<long>(offset.x()), static_cast<long>(offset.y())}, Magick::OverCompositeOp);
    }

    return bg;
}

inline Magick::Point renderer::calculate_offsets(const Magick::Image &t_img, const Magick::Image &bg, const pango::text &text, const pango::raster_text& r_text,
    const Magick::Point &scale) {

    const double x_offset = std::clamp(
        text.x * scale.x() + alignment_to_offset(text.alignment, r_text.width),
        0.0,
        static_cast<double>(bg.columns())
        );
    const double y_offset = std::clamp(
        text.y * scale.y() + calculate_baseline(r_text, scale),
        0.0,
        static_cast<double>(bg.rows())
        );

    return {x_offset, y_offset};
}

inline double renderer::calculate_baseline(const pango::raster_text &raster, const Magick::Point &scale) {
    const double ascent  = raster.metrics.ascent_px()  * scale.y();
    const double descent = raster.metrics.descent_px() * scale.y();
#if TRIM
    return OFFSET_FORMULA;
#else
    return NO_TRIM_OFFSET_FORMULA;
#endif
}

inline long renderer::alignment_to_offset(const PangoAlignment &alignment, const long &text_width) {
    switch (alignment) {
        case PANGO_ALIGN_CENTER:
            return - text_width / 2;
        case PANGO_ALIGN_RIGHT:
            return -text_width;
        default:
            return 0;
    }
}


#endif //RENDERER_H
