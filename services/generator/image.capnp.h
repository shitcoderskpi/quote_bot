// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: image.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#ifndef CAPNP_VERSION
#error "CAPNP_VERSION is not defined, is capnp/generated-header-support.h missing?"
#elif CAPNP_VERSION != 1002000
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif


CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(c9e14d40019ba921);
CAPNP_DECLARE_SCHEMA(b72c1368138cc9cb);
CAPNP_DECLARE_SCHEMA(e400aa8e6ab6d3d1);
enum class Weight_e400aa8e6ab6d3d1: uint16_t {
  THIN = 100,
  ULTRALIGHT = 200,
  LIGHT = 300,
  SEMILIGHT = 350,
  BOOK = 380,
  NORMAL = 400,
  MEDIUM = 500,
  SEMIBOLD = 600,
  BOLD = 700,
  ULTRABOLD = 800,
  HEAVY = 900,
  ULTRAHEAVY = 1000,
};
CAPNP_DECLARE_ENUM(Weight, e400aa8e6ab6d3d1);
CAPNP_DECLARE_SCHEMA(cda29255ea1e0512);
enum class Alignment_cda29255ea1e0512: uint16_t {
  LEFT,
  CENTER,
  RIGHT,
};
CAPNP_DECLARE_ENUM(Alignment, cda29255ea1e0512);

}  // namespace schemas
}  // namespace capnp


struct Image {
  Image() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct TextEntry;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c9e14d40019ba921, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Image::TextEntry {
  TextEntry() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::Weight_e400aa8e6ab6d3d1 Weight;

  typedef ::capnp::schemas::Alignment_cda29255ea1e0512 Alignment;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b72c1368138cc9cb, 2, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class Image::Reader {
public:
  typedef Image Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBackground() const;
  inline  ::capnp::Text::Reader getBackground() const;

  inline bool hasTextEntries() const;
  inline  ::capnp::List< ::Image::TextEntry,  ::capnp::Kind::STRUCT>::Reader getTextEntries() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Image::Builder {
public:
  typedef Image Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBackground();
  inline  ::capnp::Text::Builder getBackground();
  inline void setBackground( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initBackground(unsigned int size);
  inline void adoptBackground(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownBackground();

  inline bool hasTextEntries();
  inline  ::capnp::List< ::Image::TextEntry,  ::capnp::Kind::STRUCT>::Builder getTextEntries();
  inline void setTextEntries( ::capnp::List< ::Image::TextEntry,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Image::TextEntry,  ::capnp::Kind::STRUCT>::Builder initTextEntries(unsigned int size);
  inline void adoptTextEntries(::capnp::Orphan< ::capnp::List< ::Image::TextEntry,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Image::TextEntry,  ::capnp::Kind::STRUCT>> disownTextEntries();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Image::Pipeline {
public:
  typedef Image Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Image::TextEntry::Reader {
public:
  typedef TextEntry Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasContent() const;
  inline  ::capnp::Text::Reader getContent() const;

  inline  ::int32_t getX() const;

  inline  ::int32_t getY() const;

  inline bool hasSize() const;
  inline  ::capnp::Text::Reader getSize() const;

  inline  ::Image::TextEntry::Weight getWeight() const;

  inline  ::Image::TextEntry::Alignment getAlignment() const;

  inline bool hasColor() const;
  inline  ::capnp::Text::Reader getColor() const;

  inline  ::int32_t getWrapWidth() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Image::TextEntry::Builder {
public:
  typedef TextEntry Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasContent();
  inline  ::capnp::Text::Builder getContent();
  inline void setContent( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initContent(unsigned int size);
  inline void adoptContent(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownContent();

  inline  ::int32_t getX();
  inline void setX( ::int32_t value);

  inline  ::int32_t getY();
  inline void setY( ::int32_t value);

  inline bool hasSize();
  inline  ::capnp::Text::Builder getSize();
  inline void setSize( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initSize(unsigned int size);
  inline void adoptSize(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownSize();

  inline  ::Image::TextEntry::Weight getWeight();
  inline void setWeight( ::Image::TextEntry::Weight value);

  inline  ::Image::TextEntry::Alignment getAlignment();
  inline void setAlignment( ::Image::TextEntry::Alignment value);

  inline bool hasColor();
  inline  ::capnp::Text::Builder getColor();
  inline void setColor( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initColor(unsigned int size);
  inline void adoptColor(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownColor();

  inline  ::int32_t getWrapWidth();
  inline void setWrapWidth( ::int32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Image::TextEntry::Pipeline {
public:
  typedef TextEntry Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline bool Image::Reader::hasBackground() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Image::Builder::hasBackground() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Image::Reader::getBackground() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Image::Builder::getBackground() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Image::Builder::setBackground( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Image::Builder::initBackground(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Image::Builder::adoptBackground(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Image::Builder::disownBackground() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Image::Reader::hasTextEntries() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Image::Builder::hasTextEntries() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Image::TextEntry,  ::capnp::Kind::STRUCT>::Reader Image::Reader::getTextEntries() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Image::TextEntry,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Image::TextEntry,  ::capnp::Kind::STRUCT>::Builder Image::Builder::getTextEntries() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Image::TextEntry,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Image::Builder::setTextEntries( ::capnp::List< ::Image::TextEntry,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Image::TextEntry,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Image::TextEntry,  ::capnp::Kind::STRUCT>::Builder Image::Builder::initTextEntries(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Image::TextEntry,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Image::Builder::adoptTextEntries(
    ::capnp::Orphan< ::capnp::List< ::Image::TextEntry,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Image::TextEntry,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Image::TextEntry,  ::capnp::Kind::STRUCT>> Image::Builder::disownTextEntries() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Image::TextEntry,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Image::TextEntry::Reader::hasContent() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Image::TextEntry::Builder::hasContent() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Image::TextEntry::Reader::getContent() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Image::TextEntry::Builder::getContent() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Image::TextEntry::Builder::setContent( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Image::TextEntry::Builder::initContent(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Image::TextEntry::Builder::adoptContent(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Image::TextEntry::Builder::disownContent() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int32_t Image::TextEntry::Reader::getX() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int32_t Image::TextEntry::Builder::getX() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Image::TextEntry::Builder::setX( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t Image::TextEntry::Reader::getY() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int32_t Image::TextEntry::Builder::getY() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Image::TextEntry::Builder::setY( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Image::TextEntry::Reader::hasSize() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Image::TextEntry::Builder::hasSize() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Image::TextEntry::Reader::getSize() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Image::TextEntry::Builder::getSize() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Image::TextEntry::Builder::setSize( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Image::TextEntry::Builder::initSize(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Image::TextEntry::Builder::adoptSize(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Image::TextEntry::Builder::disownSize() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::Image::TextEntry::Weight Image::TextEntry::Reader::getWeight() const {
  return _reader.getDataField< ::Image::TextEntry::Weight>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::Image::TextEntry::Weight Image::TextEntry::Builder::getWeight() {
  return _builder.getDataField< ::Image::TextEntry::Weight>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Image::TextEntry::Builder::setWeight( ::Image::TextEntry::Weight value) {
  _builder.setDataField< ::Image::TextEntry::Weight>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::Image::TextEntry::Alignment Image::TextEntry::Reader::getAlignment() const {
  return _reader.getDataField< ::Image::TextEntry::Alignment>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::Image::TextEntry::Alignment Image::TextEntry::Builder::getAlignment() {
  return _builder.getDataField< ::Image::TextEntry::Alignment>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void Image::TextEntry::Builder::setAlignment( ::Image::TextEntry::Alignment value) {
  _builder.setDataField< ::Image::TextEntry::Alignment>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool Image::TextEntry::Reader::hasColor() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Image::TextEntry::Builder::hasColor() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Image::TextEntry::Reader::getColor() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Image::TextEntry::Builder::getColor() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Image::TextEntry::Builder::setColor( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Image::TextEntry::Builder::initColor(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Image::TextEntry::Builder::adoptColor(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Image::TextEntry::Builder::disownColor() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::int32_t Image::TextEntry::Reader::getWrapWidth() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::int32_t Image::TextEntry::Builder::getWrapWidth() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void Image::TextEntry::Builder::setWrapWidth( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}


CAPNP_END_HEADER

